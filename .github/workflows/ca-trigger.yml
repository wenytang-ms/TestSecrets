name: CA trigger

on:
  workflow_run:
    workflows: ["CA"]
    branches: ["main", "develop", "ga"]
    types: ["completed"]

jobs:
  DownloadAndOutput:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    outputs:
      pre_id: ${{ steps.result.outputs.preid }}
      server_version: ${{ steps.result.outputs.version }}
    steps:
      - name: Download artifact
        uses: actions/github-script@v6
        with:
          script: |
            let allArtifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.payload.workflow_run.id,
            });
            let matchArtifact = allArtifacts.data.artifacts.filter((artifact) => {
              return artifact.name == "release"
            })[0];
            let download = await github.rest.actions.downloadArtifact({
              owner: context.repo.owner,
              repo: context.repo.repo,
              artifact_id: matchArtifact.id,
              archive_format: 'zip',
            });
            let fs = require('fs');
            fs.writeFileSync(`${process.env.GITHUB_WORKSPACE}/release.zip`, Buffer.from(download.data));
      
      - name: Unzip artifact
        run: unzip release.zip
        
      - name: Get server version
        id: server
        uses: actions/github-script@v6
        with:
          script: |
            let content = String(require('fs').readFileSync('./release.txt')).trim();
            console.log("-------", content);
            let strArray = content.split(' ')
            let server = strArray.filter(item => item.includes('@wenyt-ms/gama'))
            let semver = require('semver')
            if(semver.prerelease(server)){
              return semver.prerelease(server)
            }
            return server

      - name: Get result 
        id: result
        if: ${{ steps.server.outputs.result }}
        run: |
          echo "============================ ${{ steps.server.outputs.result[0] }}"
          echo ${{steps.server.outputs.result}}[0]